{"version":3,"sources":["helpers/fetchData.js","helpers/mapColoring.js","helpers/chart.js","helpers/createEducationGroupsArr.js","App.js","index.js"],"names":["useFetch","url","useState","data","setData","loading","setLoading","a","fetch","response","json","useEffect","fetchUrl","mapColoring","countyEdLvl","colorPalette","groupsArr","render","educationDataJSON","countyDataJSON","ref","width","height","svg","d3","current","margin","innerWidth","innerHeight","counties","feature","objects","objById","reduce","accumulator","d","fips","features","forEach","Object","assign","properties","id","countyEducation","bachelorsOrHigher","minEducationLevel","maxEducationLevel","numOfSections","section","temp","i","push","Math","round","createEducationGroupsArr","titleXAxisPos","map","append","attr","titleSection","text","titleYAxisPos","tooltip","style","selectAll","enter","countyFip","on","transition","duration","html","area_name","countyName","state","countyState","pageX","pageY","legend","tempScale","domain","range","legendXAxis","tickValues","tickFormat","tickSizeOuter","call","legendWidth","App","eduData","countyData","countyLoading","useRef","length","className","viewBox","rootElement","document","getElementById","ReactDOM","StrictMode"],"mappings":"0RAEA,SAASA,EAASC,GAAM,IAAD,EACGC,mBAAS,IADZ,mBACdC,EADc,KACRC,EADQ,OAESF,oBAAS,GAFlB,mBAEdG,EAFc,KAELC,EAFK,iDAIrB,8BAAAC,EAAA,sEACyBC,MAAMP,GAD/B,cACQQ,EADR,gBAEqBA,EAASC,OAF9B,OAEQA,EAFR,OAGEN,EAAQM,GACRJ,GAAW,GAJb,4CAJqB,sBAcrB,OAHAK,qBAAU,YAXW,mCAYnBC,KACC,IACI,CAACT,EAAME,G,mBCfVQ,EAAc,SAACC,EAAaC,EAAcC,GAC9C,OAAIF,EAAcE,EAAU,IAAMF,GAAeE,EAAU,GAClDD,EAAa,GACXD,EAAcE,EAAU,IAAMF,GAAeE,EAAU,GACzDD,EAAa,GACXD,EAAcE,EAAU,IAAMF,GAAeE,EAAU,GACzDD,EAAa,GACXD,EAAcE,EAAU,IAAMF,GAAeE,EAAU,GACzDD,EAAa,GACXD,EAAcE,EAAU,IAAMF,GAAeE,EAAU,GACzDD,EAAa,GACXD,EAAcE,EAAU,IAAMF,GAAeE,EAAU,GACzDD,EAAa,GACXD,EAAcE,EAAU,IAAMF,GAAeE,EAAU,GACzDD,EAAa,GAEbA,EAAa,ICXlBE,EAAS,SAACC,EAAmBC,EAAgBC,EAAKC,EAAOC,GAC7D,IAAMC,EAAMC,IAAUJ,EAAIK,SAGpBC,EAAgB,EAAhBA,EAA8C,IAC9CC,EAAaN,EADa,EACUK,EACpCE,EAAcN,EAASI,EAFc,EAK3CF,MACA,IAAMK,EAAWC,YAAQX,EAAgBA,EAAeY,QAAQF,UAG1DG,EAAUd,EAAkBe,QAAO,SAACC,EAAaC,GAErD,OADAD,EAAYC,EAAEC,MAAQD,EACfD,IACN,IAGHL,EAASQ,SAASC,SAAQ,SAACH,GACzBI,OAAOC,OAAOL,EAAEM,WAAYT,EAAQG,EAAEO,QAIxC,IAGMC,EAAkB,SAACR,GAAD,OAAOA,EAAEM,WAAWG,mBAGtCC,EAAoBrB,IAAOK,EAASQ,SAAUM,GAC9CG,EAAoBtB,IAAOK,EAASQ,SAAUM,GAI9C3B,ECvCyB,SAC/B6B,EACAE,EACAC,GAIA,IAFA,IAAMhC,EAAY,CAAC6B,GACfI,EAAOJ,EACFK,EAAI,EAAGA,EAAIH,EAAgB,EAAGG,IACrCD,GAAQD,EACRhC,EAAUmC,KAAKC,KAAKC,MAAMJ,IAE5B,OAAOjC,ED4BWsC,CAChBT,EAPoB,EAGNO,KAAKC,OAClBP,EAAoBD,GAJD,IAehB9B,EAAeS,IAfC,GAmBhB+B,GAAiB3B,EAAc,EAQ/B4B,EAAMjC,EACTkC,OAAO,KACPC,KAAK,KAAM,OACXA,KAAK,YAHI,oBAGsBhC,EAHtB,aAGsCA,EAHtC,MAMNiC,EAAeH,EAClBC,OAAO,KACPC,KAAK,cAAe,UACpBA,KAAK,YAAa,eAErBC,EACGF,OAAO,QACPC,KAAK,KAAM,SACXA,KAAK,IAAKH,GACVG,KAAK,KAtBc,KAuBnBE,KAzBe,wCA2BlBD,EACGF,OAAO,QACPC,KAAK,KAAM,eACXA,KAAK,IAAKH,GACVG,KAAK,KAzBiBG,IA0BtBD,KA3BD,wFA8BF,IAAIE,EAAUtC,IACJ,QACPiC,OAAO,OACPC,KAAK,KAAM,WACXK,MAAM,UAAW,GAGpBP,EACGQ,UAAU,QACV7D,KAAK0B,EAASQ,UACd4B,QACAR,OAAO,QACPC,KAAK,QAAS,UACdA,KAAK,IAAKlC,OACVkC,KAAK,aAAa,SAACvB,GAAD,OAxEH,SAACA,GAAD,OAAOA,EAAEM,WAAWL,KAwEV8B,CAAU/B,MACnCuB,KAAK,kBAAkB,SAACvB,GAAD,OAAOQ,EAAgBR,MAC9CuB,KAAK,QAAQ,SAACvB,GAAD,OACZtB,EAAY8B,EAAgBR,GAAIpB,EAAcC,MAE/CmD,GAAG,aAAa,SAAChC,GAChB2B,EAAQM,aAAaC,SAAS,KAAKN,MAAM,UAAW,IACpDD,EACGQ,KADH,UA9Ee,SAACnC,GAAD,OAAOA,EAAEM,WAAW8B,UA+ExBC,CAAWrC,GADtB,aA7EgB,SAACA,GAAD,OAAOA,EAAEM,WAAWgC,MA8EPC,CAAYvC,GADzC,aACgDQ,EAAgBR,GADhE,MAEG4B,MAAM,OAAQvC,IAASmD,MAAQ,IAAM,MACrCZ,MAAM,MAAOvC,IAASoD,MAAQ,GAAK,MACnClB,KAAK,iBAAkBf,EAAgBR,OAE3CgC,GAAG,YAAY,SAAChC,GACf2B,EAAQM,aAAaC,SAAS,KAAKN,MAAM,UAAW,MAIxD,IAAMc,EAAStD,EACZkC,OAAO,KACPC,KAAK,KAAM,UACXA,KAAK,YAHO,oBAGmB/B,EAAa,EAAI,IAHpC,YAKTmD,EAAYtD,MAEfuD,OAAO,CAAClC,EAAmBC,IAC3BkC,MAAM,CAAC,EAlFU,MAoFdC,EAAczD,IACNsD,GACXI,WAAWlE,GACXmE,YAAW,SAAChD,GAAD,OAAOiB,KAAKC,MAAMlB,GAAK,OAClCiD,cAAc,GAEjBP,EACGpB,OAAO,KACPC,KAAK,KAAM,iBACXA,KAAK,YAHR,uBAGqC9B,EAAc,GAHnD,MAIGyD,KAAKJ,GAERJ,EACGb,UAAU,QACV7D,KAAKa,GACLiD,QACAR,OAAO,QACPC,KAAK,QAAS,eACdA,KAAK,KAAK,SAACvB,EAAGe,GAAJ,OArGUoC,KAqGApC,KACpBQ,KAAK,YAPR,uBAOqC9B,EAAc,GAPnD,MAQG8B,KAAK,QAvGe4B,MAwGpB5B,KAAK,SAAU,IACfA,KAAK,QAAQ,SAACvB,GAAD,OAAOtB,EAAYsB,EAAGpB,EAAcC,OElJvC,SAASuE,IACtB,IAD4B,EASVvF,EAJhB,kGAIKwF,EATqB,sBAUQxF,EAHlC,wFAP0B,mBAUrByF,EAVqB,KAUTC,EAVS,KAYtBtE,EAAMuE,mBAQZ,OANAhF,qBAAU,WACe,IAAnB6E,EAAQI,QAA+B,IAAfH,GAC1BxE,EAAOuE,EAASC,EAAYrE,EAflB,KACC,OAgBZ,CAACsE,IAGF,yBAAKG,UAAU,OACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,QAAQzE,IAAKA,EAAK0E,QAAO,cAtBhC,KAsBgC,YArB/B,SCHjB,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASjF,OACP,kBAAC,IAAMkF,WAAP,KACE,kBAACZ,EAAD,OAEFQ,K","file":"static/js/main.cccb88d8.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nfunction useFetch(url) {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  async function fetchUrl() {\r\n    const response = await fetch(url);\r\n    const json = await response.json();\r\n    setData(json);\r\n    setLoading(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchUrl();\r\n  }, []);\r\n  return [data, loading];\r\n}\r\nexport { useFetch };\r\n","// mapColoring maps a specified color to the relevant group\r\nconst mapColoring = (countyEdLvl, colorPalette, groupsArr) => {\r\n  if (countyEdLvl > groupsArr[0] && countyEdLvl <= groupsArr[1]) {\r\n    return colorPalette[1];\r\n  } else if (countyEdLvl > groupsArr[1] && countyEdLvl <= groupsArr[2]) {\r\n    return colorPalette[2];\r\n  } else if (countyEdLvl > groupsArr[2] && countyEdLvl <= groupsArr[3]) {\r\n    return colorPalette[3];\r\n  } else if (countyEdLvl > groupsArr[3] && countyEdLvl <= groupsArr[4]) {\r\n    return colorPalette[4];\r\n  } else if (countyEdLvl > groupsArr[4] && countyEdLvl <= groupsArr[5]) {\r\n    return colorPalette[5];\r\n  } else if (countyEdLvl > groupsArr[5] && countyEdLvl <= groupsArr[6]) {\r\n    return colorPalette[6];\r\n  } else if (countyEdLvl > groupsArr[6] && countyEdLvl <= groupsArr[7]) {\r\n    return colorPalette[7];\r\n  } else {\r\n    return colorPalette[0];\r\n  }\r\n};\r\n\r\nexport { mapColoring };\r\n","import * as d3 from 'd3';\r\nimport { feature } from 'topojson-client';\r\n\r\nimport { createEducationGroupsArr } from './createEducationGroupsArr';\r\nimport { mapColoring } from './mapColoring';\r\n\r\nconst render = (educationDataJSON, countyDataJSON, ref, width, height) => {\r\n  const svg = d3.select(ref.current);\r\n\r\n  // define space for the Choropleth map\r\n  const margin = { top: 0, right: 0, bottom: 0, left: 150 };\r\n  const innerWidth = width - margin.right - margin.left;\r\n  const innerHeight = height - margin.top - margin.bottom;\r\n\r\n  // Set up the projection for the US map\r\n  d3.geoAlbersUsa();\r\n  const counties = feature(countyDataJSON, countyDataJSON.objects.counties);\r\n\r\n  // Assign an id based on related fibs to each object with educational data\r\n  const objById = educationDataJSON.reduce((accumulator, d) => {\r\n    accumulator[d.fips] = d;\r\n    return accumulator;\r\n  }, {});\r\n\r\n  // Re-assign education properties to the array with counties data\r\n  counties.features.forEach((d) => {\r\n    Object.assign(d.properties, objById[d.id]);\r\n  });\r\n\r\n  // Define constants for the map and legend\r\n  const countyFip = (d) => d.properties.fips;\r\n  const countyName = (d) => d.properties.area_name;\r\n  const countyState = (d) => d.properties.state;\r\n  const countyEducation = (d) => d.properties.bachelorsOrHigher;\r\n\r\n  const numOfSections = 8;\r\n  const minEducationLevel = d3.min(counties.features, countyEducation);\r\n  const maxEducationLevel = d3.max(counties.features, countyEducation);\r\n  const section = Math.round(\r\n    (maxEducationLevel - minEducationLevel) / numOfSections\r\n  );\r\n  const groupsArr = createEducationGroupsArr(\r\n    minEducationLevel,\r\n    numOfSections,\r\n    section\r\n  );\r\n  const legendWidth = 300;\r\n  const legendBarWidth = legendWidth / numOfSections;\r\n\r\n  // Define the color scheme\r\n  const colorPalette = d3.schemeGreens[numOfSections];\r\n\r\n  // Create and position axes text labels and the title\r\n  const titleText = 'United States Educational Attainment';\r\n  const titleXAxisPos = -innerHeight / 2;\r\n  const titleYAxisPos = -100;\r\n\r\n  const subtitleText =\r\n    \"Percentage of adults age 25 and older with a bachelor's degree or higher (2010-2014)\";\r\n  const subtitleYAxisPos = titleYAxisPos + 22;\r\n\r\n  // define and append map to the svg\r\n  const map = svg\r\n    .append('g')\r\n    .attr('id', 'map')\r\n    .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n  // append the title section\r\n  const titleSection = map\r\n    .append('g')\r\n    .attr('text-anchor', 'middle')\r\n    .attr('transform', 'rotate(-90)');\r\n\r\n  titleSection\r\n    .append('text')\r\n    .attr('id', 'title')\r\n    .attr('x', titleXAxisPos)\r\n    .attr('y', titleYAxisPos)\r\n    .text(titleText);\r\n\r\n  titleSection\r\n    .append('text')\r\n    .attr('id', 'description')\r\n    .attr('x', titleXAxisPos)\r\n    .attr('y', subtitleYAxisPos)\r\n    .text(subtitleText);\r\n\r\n  // Default settings for the tooltips\r\n  let tooltip = d3\r\n    .select('body')\r\n    .append('div')\r\n    .attr('id', 'tooltip')\r\n    .style('opacity', 0);\r\n\r\n  // Append counties' info to the map\r\n  map\r\n    .selectAll('path')\r\n    .data(counties.features)\r\n    .enter()\r\n    .append('path')\r\n    .attr('class', 'county')\r\n    .attr('d', d3.geoPath())\r\n    .attr('data-fips', (d) => countyFip(d))\r\n    .attr('data-education', (d) => countyEducation(d))\r\n    .attr('fill', (d) =>\r\n      mapColoring(countyEducation(d), colorPalette, groupsArr)\r\n    )\r\n    .on('mouseover', (d) => {\r\n      tooltip.transition().duration(200).style('opacity', 0.8);\r\n      tooltip\r\n        .html(`${countyName(d)}, ${countyState(d)}: ${countyEducation(d)}%`)\r\n        .style('left', d3.event.pageX - 100 + 'px')\r\n        .style('top', d3.event.pageY - 80 + 'px')\r\n        .attr('data-education', countyEducation(d));\r\n    })\r\n    .on('mouseout', (d) => {\r\n      tooltip.transition().duration(500).style('opacity', 0);\r\n    });\r\n\r\n  // Add the legend to the visualization\r\n  const legend = svg\r\n    .append('g')\r\n    .attr('id', 'legend')\r\n    .attr('transform', `translate(${innerWidth / 2 + 150}, -580)`);\r\n\r\n  const tempScale = d3\r\n    .scaleLinear()\r\n    .domain([minEducationLevel, maxEducationLevel])\r\n    .range([0, legendWidth]);\r\n\r\n  const legendXAxis = d3\r\n    .axisBottom(tempScale)\r\n    .tickValues(groupsArr)\r\n    .tickFormat((d) => Math.round(d) + '%')\r\n    .tickSizeOuter(0);\r\n\r\n  legend\r\n    .append('g')\r\n    .attr('id', 'legend-x-axis')\r\n    .attr('transform', `translate(0, ${innerHeight + 10})`)\r\n    .call(legendXAxis);\r\n\r\n  legend\r\n    .selectAll('rect')\r\n    .data(groupsArr)\r\n    .enter()\r\n    .append('rect')\r\n    .attr('class', 'legend-rect')\r\n    .attr('x', (d, i) => i * legendBarWidth)\r\n    .attr('transform', `translate(0, ${innerHeight - 10})`)\r\n    .attr('width', legendBarWidth)\r\n    .attr('height', 20)\r\n    .attr('fill', (d) => mapColoring(d, colorPalette, groupsArr)); //fill with palette accordingly\r\n};\r\n\r\nexport { render };\r\n","/* createEducationGroupsArr is a helper function used to create groups based \r\non education level */\r\nconst createEducationGroupsArr = (\r\n  minEducationLevel,\r\n  numOfSections,\r\n  section\r\n) => {\r\n  const groupsArr = [minEducationLevel];\r\n  let temp = minEducationLevel;\r\n  for (let i = 0; i < numOfSections - 1; i++) {\r\n    temp += section;\r\n    groupsArr.push(Math.round(temp));\r\n  }\r\n  return groupsArr;\r\n};\r\n\r\nexport { createEducationGroupsArr };\r\n","import React, { useEffect, useRef } from 'react';\nimport './styles/main.scss';\n\nimport { useFetch } from './helpers/fetchData';\nimport { render } from './helpers/chart';\n\nexport default function App() {\n  const WIDTH = 1260;\n  const HEIGHT = 600;\n\n  const EDU_DATA_LINK =\n    'https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/for_user_education.json';\n  const COUNTIES_DATA_LINK =\n    'https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/counties.json';\n\n  const [eduData] = useFetch(EDU_DATA_LINK);\n  const [countyData, countyLoading] = useFetch(COUNTIES_DATA_LINK);\n\n  const ref = useRef();\n\n  useEffect(() => {\n    if (eduData.length !== 0 && countyData !== 0) {\n      render(eduData, countyData, ref, WIDTH, HEIGHT);\n    }\n  }, [countyLoading]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"viz-container\">\n        <svg className=\"graph\" ref={ref} viewBox={`0 0 ${WIDTH} ${HEIGHT}`} />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}